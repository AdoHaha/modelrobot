// Generated by CoffeeScript 1.6.2
(function() {
  var _ref, _ref1, _ref2, _ref3,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.App = window.App || {};

  App.el2array = function(el, def, check) {
    var arrayw, el2array;

    if (def == null) {
      def = "0 0 0";
    }
    el2array = (check && el) || def;
    arrayw = el2array.split(" ");
    arrayw = _.map(arrayw, function(num) {
      return num * 1;
    });
    return arrayw;
  };

  App.RobotJoint = (function(_super) {
    __extends(RobotJoint, _super);

    function RobotJoint() {
      this.jointogether = __bind(this.jointogether, this);      _ref = RobotJoint.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    /*
    <joint name="gripper_extension" type="prismatic">
       <parent link="base_link"/>
       <child link="gripper_pole"/>
       <limit effort="1000.0" lower="-0.38" upper="0" velocity="0.5"/>
       <origin rpy="0 0 1.57075" xyz="0 0.19 .2"/>
    	  <axis xyz="0 0 1"/>
    */


    RobotJoint.prototype.initialize = function() {
      var axis, basicMatrix, position, rotation;

      this.theta = 0;
      axis = App.el2array(_.has(this.attributes, "axis") && this.attributes.axis.xyz, "1 0 0");
      this.axis = new THREE.Vector3(axis[0], axis[1], axis[2]);
      rotation = App.el2array(_.has(this.attributes, "origin") && this.attributes.origin.rpy, "0 0 0");
      this.basicrotation = new THREE.Vector3(rotation[0], rotation[1], rotation[2]);
      position = App.el2array(_.has(this.attributes, "origin") && this.attributes.origin.xyz, "0 0 0");
      this.basicposition = new THREE.Vector3(position[0], position[1], position[2]);
      this.lower = this["arguments"].lower || -Infinity;
      this.upper = this["arguments"].upper || Infinity;
      basicMatrix = new THREE.Matrix4();
      this.movementMatrix = new THREE.Matrix4();
      basicMatrix.setRotationFromEuler(this.basicrotation);
      basicMatrix.setPosition(this.basicposition);
      this.basicMatrix = basicMatrix;
      this.currentMatrix = new THREE.Matrix4();
      this.type = this["arguments"].type;
      this.on("change:linkcollection", this.jointogether);
      return this;
    };

    RobotJoint.prototype.jointogether = function() {
      var child, parent;

      if (_.has(this.attributes, "parent") && _.has(this.attributes, "child") && _.has(this.attributes, "linkcollection")) {
        child = this.get(linkcollection).get(this.attributes.child.link);
        parent = this.get(linkcollection).get(this.attributes.child.parent);
        this.parentobject3d = parent.get("link");
        this.childobject3d = child.get("link");
        this.parentobject3d.add(this.childobject3d);
        this.childobject3d.matrixAutoUpdate = false;
        return this.childobject3d.matrix = basicMatrix;
      }
    };

    RobotJoint.prototype.movejoint = function(t1, t2) {
      var tempMatrix, tempaxis;

      t1 = t1 || this.theta;
      tempMatrix = new THREE.Matrix4();
      tempaxis = new THREE.Vector3().copy(this.axis);
      if (this.type === "continuous" || (t1 < this.upper && t1 > this.lower)) {
        switch (this.type) {
          case "revolute":
            this.movementMatrix = tempMatrix.rotateByAxis(this.axis, t1);
            break;
          case "continuous":
            this.movementMatrix = tempMatrix.rotateByAxis(this.axis, t1);
            break;
          case "prismatic":
            this.movementMatrix = tempMatrix.translate(tempaxis.multiplyScalar(t1));
            break;
          case "fixed":
            this.movementMatrix.identity();
            break;
          case "planar":
            this.movementMatrix.identity();
        }
      }
      this.currentmatrix.multiplyMatrices(this.movementMatrix, this.basicMatrix);
      return this.childobject3d.matrix = this.currentmatrix;
    };

    return RobotJoint;

  })(Backbone.Model);

  App.RobotLink = (function(_super) {
    var robotBaseMaterial;

    __extends(RobotLink, _super);

    function RobotLink() {
      _ref1 = RobotLink.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    robotBaseMaterial = new THREE.MeshPhongMaterial({
      color: 0x6E23BB,
      specular: 0x6E23BB,
      shininess: 20
    });

    RobotLink.prototype.initialize = function() {
      var link;

      this.id = this.get("name");
      this.makeobject3d();
      link = new THREE.Object3D();
      link.name = this.get("name");
      link.add(this.meshvis);
      this.set("link", link);
      return this;
    };

    RobotLink.prototype.makeobject3d = function() {
      var boxsize, length, orientation, position, radius;

      if (_.has(this.attributes, "visual")) {
        if (_.has(this.attributes.visual.geometry, "box")) {
          boxsize = App.el2array(this.attributes.visual.geometry.box.size, "0 0 0");
          this.makebox(boxsize);
        } else if (_.has(this.attributes.visual.geometry, "cylinder")) {
          length = this.attributes.visual.geometry.cylinder.length || 0;
          radius = this.attributes.visual.geometry.cylinder.radius || 0;
          this.makecylinder(length, radius);
        } else {
          this.makeempty();
        }
        position = App.el2array(_.has(this.attributes.visual, "origin") && this.attributes.visual.origin.xyz, "0 0 0");
        orientation = App.el2array(_.has(this.attributes.visual, "origin") && this.attributes.visual.origin.rpy, "0 0 0");
        this.meshvis.position.set(position[0], position[1], position[2]);
        this.meshvis.rotation.set(orientation[0], orientation[1], orientation[2]);
        return this;
      } else {
        console.log("there are no visual attributes");
        this.makeempty();
        return this;
      }
    };

    RobotLink.prototype.makecylinder = function(length, radius) {
      return this.meshvis = new THREE.Mesh(new THREE.CylinderGeometry(radius, radius, length, 500, 1), this.robotBaseMaterial);
    };

    RobotLink.prototype.makebox = function(boxsize) {
      return this.meshvis = new THREE.Mesh(new THREE.CubeGeometry(boxsize[0] * 1, boxsize[1] * 1, boxsize[2] * 1), this.robotBaseMaterial);
    };

    RobotLink.prototype.makeempty = function() {
      return this.meshvis = new THREE.Mesh();
    };

    return RobotLink;

  })(Backbone.Model);

  App.RobotLinkCollection = (function(_super) {
    __extends(RobotLinkCollection, _super);

    function RobotLinkCollection() {
      _ref2 = RobotLinkCollection.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    RobotLinkCollection.prototype.model = App.RobotLink;

    return RobotLinkCollection;

  })(Backbone.Collection);

  App.RobotJointCollection = (function(_super) {
    __extends(RobotJointCollection, _super);

    function RobotJointCollection() {
      _ref3 = RobotJointCollection.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    RobotJointCollection.prototype.model = App.RobotJoint;

    return RobotJointCollection;

  })(Backbone.Collection);

}).call(this);
